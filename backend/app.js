const express = require("express");
const cors = require("cors");
const { Sequelize } = require("sequelize");

const sequelize = new Sequelize({
  dialect: "sqlite",
  storage: "./db.sqlite",
});

const Price = Object.freeze({
  Cake: 500,
  Cookies: 50,
  Muffins: 100,
});

const Orders = sequelize.define(
  "orders",
  {
    order_id: {
      type: Sequelize.INTEGER,
      primaryKey: true,
      autoIncrement: true,
    },
    item_type: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    order_state: {
      type: Sequelize.STRING,
      allowNull: false,
    },
    last_updated_time: {
      type: Sequelize.DATE,
      allowNull: false,
    },
    branch: {
      type: Sequelize.INTEGER,
      allowNull: false,
    },
    customer_id: {
      type: Sequelize.INTEGER,
      allowNull: false,
    },
    amount: {
      type: Sequelize.INTEGER,
      allowNull: false,
    },
  },
  {
    timestamps: false,
  }
);

sequelize
  .authenticate()
  .then(() => {
    console.log("Connection has been established successfully.");
  })
  .catch((error) => {
    console.error("Unable to connect to the database:", error);
  });

const app = express();
app.use(express.json());
app.use(cors());

app.get("/", (req, res) => {
  res.send("Hello World");
});

app.get("/orders", async (req, res) => {
  // Filter by item_type, state, branch, start_date, end_date
  const where = {};
  const {
    item_type,
    state,
    branch,
    customer_id,
    start_date,
    end_date = new Date().toISOString(),
    page = 1,
    page_size = 10,
  } = req.query;

  console.log(customer_id);
  if (item_type) {
    where.item_type = item_type;
  }
  if (state) {
    where.order_state = state;
  }
  if (branch) {
    where.branch = branch;
  }
  if (customer_id) {
    where.customer_id = customer_id;
  }
  if (start_date && end_date) {
    where.last_updated_time = {
      [Sequelize.Op.between]: [start_date, end_date],
    };
  }
  const total = await Orders.count({ where });
  const orders = await Orders.findAll({
    where,
    offset: (page - 1) * page_size,
    limit: page_size,
    order: [["last_updated_time", "DESC"]],
  });

  res.json({ total, orders });
});

app.get("/orders/:id", async (req, res) => {
  const id = req.params.id;
  const order = await Orders.findByPk(id);
  console.log(order);
  if (order) {
    res.json(order);
  } else {
    res.status(404).json({ error: "Order not found" });
  }
});

app.get("/orders/distribution/item", async (_0, res) => {
  const result = await sequelize.query(
    "SELECT item_type as label, COUNT(*) as count FROM orders GROUP BY label",
    { type: Sequelize.QueryTypes.SELECT }
  );
  res.json(result);
});

app.get("/orders/distribution/state", async (_0, res) => {
  const result = await sequelize.query(
    "SELECT order_state as label, COUNT(*) as count FROM orders GROUP BY label",
    { type: Sequelize.QueryTypes.SELECT }
  );
  res.json(result);
});

// revenue generated by item_type
app.get("/orders/revenue/item", async (_0, res) => {
  const result = await sequelize.query(
    "SELECT item_type as label, SUM(amount) as count FROM orders GROUP BY label",
    { type: Sequelize.QueryTypes.SELECT }
  );
  res.json(result);
});

// weekly revenue generated
app.get("/orders/revenue/week", async (_0, res) => {
  const result = await sequelize.query(
    "SELECT strftime('%W', last_updated_time) as label, SUM(amount) as count FROM orders GROUP BY label",
    { type: Sequelize.QueryTypes.SELECT }
  );
  res.json(result);
});

// time series data of revenue generated, per day
app.get("/orders/revenue/day", async (_0, res) => {
  const result = await sequelize.query(
    "SELECT strftime('%Y-%m-%d', last_updated_time) as label, SUM(amount) as count FROM orders GROUP BY label",
    { type: Sequelize.QueryTypes.SELECT }
  );
  res.json(result);
});

// time series data of total orders, per day
app.get("/orders/total/day", async (_0, res) => {
  const result = await sequelize.query(
    "SELECT strftime('%Y-%m-%d', last_updated_time) as label, COUNT(*) as count FROM orders GROUP BY label",
    { type: Sequelize.QueryTypes.SELECT }
  );
  res.json(result);
});

// Revenue generated by top 5 branches
app.get("/orders/revenue/branch", async (_0, res) => {
  const result = await sequelize.query(
    "SELECT branch as label, SUM(amount) as count FROM orders GROUP BY label ORDER BY count DESC LIMIT 5",
    { type: Sequelize.QueryTypes.SELECT }
  );
  res.json(result);
});

// Top 5 customers with most orders
app.get("/orders/distribution/customers", async (_0, res) => {
  const result = await sequelize.query(
    "SELECT customer_id as label, COUNT(*) as count FROM orders GROUP BY label ORDER BY count DESC LIMIT 5",
    { type: Sequelize.QueryTypes.SELECT }
  );
  res.json(result);
});

// time series chart of revenue generated by item_type, daily
app.get("/orders/revenue/item/all", async (_0, res) => {
  const resp = {};
  const result = await sequelize.query(
    "SELECT strftime('%Y-%m-%d', last_updated_time) as label, item_type as category, SUM(amount) as count FROM orders GROUP BY label, category",
    { type: Sequelize.QueryTypes.SELECT }
  );
  resp.cake = result.filter((item) => item.category === "Cake");
  resp.cookies = result.filter((item) => item.category === "Cookies");
  resp.muffins = result.filter((item) => item.category === "Muffins");
  res.json(resp);
});

// time series chart of number of orders by item_type, daily
app.get("/orders/distribution/item/all", async (_0, res) => {
  const resp = {};
  const result = await sequelize.query(
    "SELECT strftime('%Y-%m-%d', last_updated_time) as label, item_type as category, COUNT(*) as count FROM orders GROUP BY label, category",
    { type: Sequelize.QueryTypes.SELECT }
  );
  resp.cake = result.filter((item) => item.category === "Cake");
  resp.cookies = result.filter((item) => item.category === "Cookies");
  resp.muffins = result.filter((item) => item.category === "Muffins");
  res.json(resp);
});

app.post("/orders", async (req, res) => {
  const newOrder = req.body;
  newOrder.amount = Price[newOrder.item_type];
  newOrder.last_updated_time = new Date().toISOString();
  const order = await Orders.create(req.body);
  res.json(order);
});

app.listen(8000, () => {
  console.log("Server running on port 8000");
});
